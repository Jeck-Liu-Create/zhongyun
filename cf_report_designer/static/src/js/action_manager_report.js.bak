/**
 * CFPrint打印类
 * ver 1.3
 * 康虎软件工作室
 * Email: wdmsyf@sina.com
 * QQ: 360026606
 * 微信: 360026606
 */
/**
 * websocket部分可以抵用下面这个：
 * https://jsrepos.com/lib/vitalets-websocket-as-promised-javascript-websocket
 */
odoo.define('cf_report_designer.ReportActionManager', function(require) {
"use strict";

var ActionManager = require('web.ActionManager');
var core = require('web.core');
var framework = require('web.framework');
var session = require('web.session');

var _t = core._t;

/**
 *
 * @param SOCKET_URL
 * @returns {Promise<unknown>|Promise<WebSocket>}
 */
function getSocket(SOCKET_URL) {
    if (getSocket.server && getSocket.server.readyState < 2) {
        console.log("reusing the socket connection [state = " + getSocket.server.readyState + "]: " + getSocket.server.url);
        return Promise.resolve(getSocket.server);
    }

    return new Promise(function (resolve, reject) {
        getSocket.server = new WebSocket(SOCKET_URL);

        getSocket.server.onopen = function () {
            console.log("socket connection is opened [state = " + getSocket.server.readyState + "]: " + getSocket.server.url);
            resolve(getSocket.server);
        };
        getSocket.server.onmessage = function(event){
            var dat = event.data;
            /**
             * currentTarget: WebSocket {url: 'ws://127.0.0.1:54321/', readyState: 1, bufferedAmount: 0, onopen: ƒ, onerror: ƒ, …}
                data: "{\"result\": 1, \"message\": \"完成\"}"
                defaultPrevented: false
             */
            var datJson = JSON.parse(dat);
            console.log("接收到打印伺服器信息：\n"+datJson);
        };
        getSocket.server.onerror = function (err) {
            console.error("socket connection error : ", err);
            reject(err);
        };
    });
};

ActionManager.include({
    /**
     * 打印数据发送到打印伺服器
     * @param data
     * @private
     */
    _sendToPrint: function(data){
        var self = this;
        var _rptData = data.data || '';
        var _delay_send = data._delay_send || 1000;            //发送打印服务器前延时时长,-1表示不自动发送
        var _delay_close = data.delay_close || 1000;           //打印完成后关闭窗口的延时时长, -1则表示不关闭
        var cfprint_addr = data.address || "127.0.0.1";    //打印服务器的地址
        var cfprint_port = data.port || 54321;          //打印服务器监听端口

        var url = "ws://"+cfprint_addr+":"+cfprint_port;
        getSocket(url).then(function(server) {
            console.log("报表数据发送到打印伺服器...");
            server.send(_rptData);
            self.do_notify(_t("提示"), _t("报表已发送到打印伺服器。\n如果打印机未输出报表，请检查打印伺服器提示信息。"), false);
        }).catch(function(err) {
            console.error("打印报表失败。"+err);
            self.do_warn(_t('Warning'), err, false);
        });
    },

    /**
     * Downloads a CF report data for the given url. It blocks the UI during the
     * report generation and download.
     *
     * @param {string} url
     * @returns {Promise} resolved when the report has been downloaded ;
     *   rejected if something went wrong during the report generation
     */
    _downloadReportCF: function(url) {
        var self = this;
        framework.blockUI();
        return new Promise(function(resolve, reject) {
            var type = 'qweb-' + url.split('/')[2];
            var blocked = !session.rpc('/cfreport/download', {
                data: [url, type],
                token: 'dummy-because-api-expects-one',
                context: session.user_context,
            }).then(function (result) {
                console.log("下载康虎云报表数据成功。");
                console.log(result);
                self._sendToPrint(result);
                framework.unblockUI();
            });
            if (blocked) {
                // AAB: this check should be done in get_file service directly, should not be the concern of the caller (and that way, get_file could return a promise)
                var message = _t('A popup window with your report was blocked. You may need to change your browser settings to allow popup windows for this page.');
                self.do_warn(_t('Warning'), message, true);
            }
        });
        framework.unblockUI();
    },

    /**
     * Launch download action of the report
     *
     * @private
     * @param {Object} action the description of the action to execute
     * @param {Object} options @see doAction for details
     * @returns {Promise} resolved when the action has been executed
     */
    _triggerDownloadCF: function (action, options, type){
        var self = this;
        var reportUrls = this._makeReportUrls(action);
        return this._downloadReportCF(reportUrls[type])
            .then(function (result) {
                console.log("已下载康虎云报表数据。");
                if (action.close_on_report_download) {
                    var closeAction = { type: 'ir.actions.act_window_close' };
                    return self.doAction(closeAction, _.pick(options, 'on_close'));
                } else {
                    return options.on_close();
                }
            });
    },

    /**
     * Executes actions of type 'ir.actions.report'.
     *
     * @private
     * @param {Object} action the description of the action to execute
     * @param {Object} options @see doAction for details
     * @returns {Promise} resolved when the action has been executed
     */
    _executeReportAction: function (action, options) {
        var self = this;

        var ctx = action.context;
        var isDesign = false;
        if(ctx) {
            isDesign = ctx.is_design;
        }
        //设计状态按跳转页面流程处理
        if(!isDesign && action.report_type === 'qweb-html' && (action.cf_report_define_id || action.report_name.startsWith("cf_report_designer."))){
            console.info("处理康虎云报表");
            return self._triggerDownloadCF(action, options, 'html');
        }else{
            return this._super.apply(this, arguments);
        }
    },

});

});
